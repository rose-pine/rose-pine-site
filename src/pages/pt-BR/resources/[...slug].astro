---
import i18next, { changeLanguage } from "i18next";
import { localizePath } from "astro-i18next";
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "$layouts/base.astro";
import PageIntro from "$components/page-intro.svelte";
import Link from "$components/link.svelte";
import { tools } from "$data/tools";
import { getLocaleAndPath } from "src/utilities";

changeLanguage("pt-BR");

const currentLanguage = i18next.language ?? "en";
export async function getStaticPaths() {
	const guides = await getCollection("guides");
	return guides.map((entry) => {
		const { path } = getLocaleAndPath(entry.id);
		return {
			params: { slug: path },
			props: { entry, guides },
		};
	});
}
export type Props = {
	entry: CollectionEntry<"guides">;
	guides: CollectionEntry<"guides">[];
};
const { entry, guides } = Astro.props;
const { path: entryPath } = getLocaleAndPath(entry.id);
const pathsWithTranslations = new Set<string>();
guides.forEach(({ id }) => {
	const { locale, path } = getLocaleAndPath(id);
	if (locale === currentLanguage) {
		pathsWithTranslations.add(path);
	}
});
const entryLanguage = pathsWithTranslations.has(entryPath)
	? currentLanguage
	: "en";
const entryToRender =
	guides.find(({ id }) => id === `${entryLanguage}/${entryPath}.md`) ?? entry;
const { Content } = await entryToRender.render();
---

<Layout
	title={entryToRender.data.title}
	description={entryToRender.data.description}
>
	<div class="grid grid-cols-1 gap-20 lg:grid-cols-[auto,1fr]">
		<div>
			<PageIntro
				heading={entryToRender.data.title}
				subheading={entryToRender.data.description}
			/>

			<ul class="animate-enter mt-10 hidden lg:block" style="--stagger: 2">
				<li
					class="tracking-loose text-xs font-medium uppercase leading-loose text-subtle"
				>
					Resources
				</li>
				{
					guides
						.filter(({ id }) => {
							const { locale, path } = getLocaleAndPath(id);
							const hasTranslation = pathsWithTranslations.has(path);

							return (
								(!hasTranslation && locale === "en") ||
								(hasTranslation && locale === currentLanguage)
							);
						})
						.sort((a, b) => b.data.priority - a.data.priority)
						.map(({ id, data }) => {
							const { locale, path } = getLocaleAndPath(id);
							const localizedPath = localizePath(
								`/resources/${path}`,
								locale === currentLanguage ? locale : undefined,
							);
							return (
								<li class="leading-loose">
									<Link href={localizedPath} decorations={false}>
										{data.title}
									</Link>
								</li>
							);
						})
				}
				<hr class="my-3" />
				{
					tools.map(({ name, href }) => (
						<li class="leading-loose">
							<Link href={href}>{name}</Link>
						</li>
					))
				}
			</ul>
		</div>

		<article class="animate-enter" style="--stagger: 2">
			<Content />
		</article>
	</div>
</Layout>
